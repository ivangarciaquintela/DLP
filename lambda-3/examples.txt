#Multi-line expressions:

true
;;

if false 
then true 
else false;;


#Fixed-point Combinator

#sum:
letrec sum : Nat -> Nat -> Nat =
lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) in
sum 21 34;;

#prod:
letrec sum : Nat -> Nat -> Nat =                                    
lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) in
letrec prod : Nat -> Nat -> Nat =
lambda n : Nat. lambda m : Nat. if iszero n then 0 else sum (prod (pred n) m) m in
prod 2 3;;

#fib:
letrec sum : Nat -> Nat -> Nat =                                      
        lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) in
        letrec fib : Nat -> Nat =
                lambda n : Nat. if iszero n then 0 else if iszero (pred n) then 1 else
                sum (fib (pred (pred n))) (fib (pred n))
                in fib 6;;

#fact:
letrec sum : Nat -> Nat -> Nat = lambda n : Nat. lambda m : Nat. if iszero n then m else succ (sum (pred n) m) in
letrec prod : Nat -> Nat -> Nat = lambda n : Nat. lambda m : Nat. if iszero n then 0 else sum n (prod (pred m) n) in
letrec fact : Nat -> Nat = lambda n : Nat. if iszero n then 1 else prod n (fact (pred n)) in fact 6;;


# Global Context:
a=10;;
a;;


# String
"a"
concat "a" "b"
strlen "aaa"


#Tuplas
{3,2};;
{3,"hola"};;
{true, "hola"};;
x = {3, true};;
x = {3, true,"hola"};;
x.0;;
x.1;;
x.3;;

#Records
{val1 = 1, val2 = {2,1}, val3 = true , val4 = "hola"};;
x = {val1 = 1, val2 = {2,1}, val3 = true , val4 = "hola"};;

#Listas

Nat.nil;;
id = L x:Nat. x;;
a=1;;
lista = Nat.nil ;;
lista = Nat.cons 1 lista;;
lista =  (Nat.cons (id 1) (Nat.cons (id 2) (Nat.cons (id a) (Nat.nil))));;
Nat.head lista;;
Nat.tail lista;;
letrec len : (Nat list) -> Nat = lambda l : Nat list. if (Nat.isnil l) then 0 else (succ (len (Nat.tail l)))
in len lista;;
lst = Nat.cons 1 (Nat.cons 2 (Nat.cons 3 (Nat.cons 4 (Nat.nil))));;

#Lista de Bool 
lstBool = Bool.nil;;
lstBool = Bool.cons true lstBool;;
Bool.cons true (Bool.nil);;

lstB = Bool.nil;;
lstB = Bool.cons true lstB;;       
Bool.tail lstB;;
Bool.head lstB;;


#Lista de String
lstring = String.nil;;


#Other
true;;
let x = true in x;;
if false then true else false;;
0;;
succ (succ (succ 0));;
3;;
succ (pred 0);;
iszero (pred (succ (succ 0)));;
if iszero 3 then 0 else 1;;
iszero true;;
if 1 then true else false;;
if iszero 3 then 0 else false;;
let id = L x:Nat. x in id 3;;
let id_bool = L x:Bool. x in id_bool true;;
let id_nat = L x:Nat. x in id_nat 5;;
let x = 5 in let id_nat = L x:Nat. x in id_nat x;;
